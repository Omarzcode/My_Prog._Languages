% Clear workspace and command window
clear; close all; clc;

% Parameters
bits_stream = randi([0 1], 1, 64); % 64-bit random stream as per minimum requirement
samples = 100; % Samples per bit

% Encoding
man = kron(2*bits_stream - 1, [ones(1,samples/2), -ones(1,samples/2)]); % Manchester encoding
nrz = kron(2*bits_stream - 1, ones(1,samples)); % Polar NRZ encoding

% Time plots (first 10 bits for better visualization)
t = (0:10*samples-1)/samples;
figure('Position', [100, 100, 800, 400]);

subplot(2,1,1);
plot(t, man(1:10*samples), 'k', 'LineWidth', 1);
title('Manchester Encoding', 'FontSize', 13);
xlabel('Time (s)', 'FontSize', 11);
ylabel('Amplitude', 'FontSize', 11);
ylim([-1.5 1.5]);
xlim([0 10]);
grid on;
set(gca, 'FontSize', 11);
for i = 1:10
    text(i-0.5, 1.2, num2str(bits_stream(i)), 'FontSize', 11, 'HorizontalAlignment', 'center');
end

subplot(2,1,2);
plot(t, nrz(1:10*samples), 'b', 'LineWidth', 1);
title('Polar NRZ Encoding', 'FontSize', 13);
xlabel('Time (s)', 'FontSize', 11);
ylabel('Amplitude', 'FontSize', 11);
ylim([-1.5 1.5]);
xlim([0 10]);
grid on;
set(gca, 'FontSize', 11);
for i = 1:10
    text(i-0.5, 1.2, num2str(bits_stream(i)), 'FontSize', 11, 'HorizontalAlignment', 'center');
end

% Frequency domain (full 64-bit signal)
N = length(man);
f = (-N/2:N/2-1)*(1/(N/samples)); % Frequency axis in Hz
figure('Position', [100, 100, 800, 400]);

subplot(2,1,1);
plot(f, abs(fftshift(fft(man)/N)), 'k', 'LineWidth', 1);
title('Manchester - Power Spectral Density');
xlabel('Frequency (Hz)', 'FontSize', 11);
ylabel('Amplitude', 'FontSize', 11);
xlim([-20 20]);
grid on;
set(gca, 'FontSize', 11);

subplot(2,1,2);
plot(f, abs(fftshift(fft(nrz)/N)), 'b', 'LineWidth', 1);
title('Polar NRZ - Power Spectral Density');
xlabel('Frequency (Hz)', 'FontSize', 11);
ylabel('Amplitude', 'FontSize', 11);
xlim([-20 20]);
grid on;
set(gca, 'FontSize', 11);

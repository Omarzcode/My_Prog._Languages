% Clear workspace and figures
clear all; close all; clc;

% Parameters
N = 64; % Number of bits
bit_rate = 1; % Bit rate (1 bit/s)
T = 1/bit_rate; % Bit duration
fc = 10; % Carrier frequency (Hz)
samples_per_bit = 100; % Samples per bit
fs = samples_per_bit * bit_rate; % Sampling frequency
t = linspace(0, N*T, N*samples_per_bit); % Time vector

% Generate random bit stream
bits = randi([0 1], 1, N);

% BPSK Modulation
bpsk_signal = zeros(1, length(t));
for i = 1:N
    start_idx = (i-1)*samples_per_bit + 1;
    end_idx = i*samples_per_bit;
    if bits(i) == 1
        bpsk_signal(start_idx:end_idx) = cos(2*pi*fc*t(start_idx:end_idx)); % 0째 phase
    else
        bpsk_signal(start_idx:end_idx) = -cos(2*pi*fc*t(start_idx:end_idx)); % 180째 phase
    end
end

% FFT for spectral domain
N_fft = 2^nextpow2(length(t));
freq = (-N_fft/2:N_fft/2-1)*(fs/N_fft);
bpsk_fft = fftshift(fft(bpsk_signal, N_fft));
bpsk_psd = abs(bpsk_fft).^2 / (N_fft * fs);

% Plot Transmitter Output
figure('Position', [100, 100, 800, 400]);
subplot(2,1,1);
plot(t, bpsk_signal, 'b', 'LineWidth', 1);
grid on;
title('BPSK Signal - Time Domain', 'FontSize', 14);
xlabel('Time (s)', 'FontSize', 12);
ylabel('Amplitude', 'FontSize', 12);
axis([0 10 -1.5 1.5]);
set(gca, 'FontSize', 12);

subplot(2,1,2);
semilogy(freq, bpsk_psd, 'b', 'LineWidth', 1.5); % Use semilogy for better visualization
grid on;
title('BPSK Signal PSD', 'FontSize', 14);
xlabel('Frequency (Hz)', 'FontSize', 12);
ylabel('Power/Hz (dB)', 'FontSize', 12);
axis([-15 15 1e-5 max(bpsk_psd)*1.1]); % Adjusted y-axis for log scale
set(gca, 'FontSize', 12, 'GridAlpha', 0.3, 'GridColor', [0.5 0.5 0.5]);
% Highlight carrier frequency
hold on;
line([fc fc], [1e-5 max(bpsk_psd)*1.1], 'Color', 'r', 'LineStyle', '--', 'LineWidth', 1);
line([-fc -fc], [1e-5 max(bpsk_psd)*1.1], 'Color', 'r', 'LineStyle', '--', 'LineWidth', 1);
text(fc+1, max(bpsk_psd)/2, 'f_c', 'Color', 'r', 'FontSize', 10);
text(-fc-3, max(bpsk_psd)/2, '-f_c', 'Color', 'r', 'FontSize', 10);
set(gca, 'Color', [0.98 0.98 0.98]); % Light gray background

% Coherent Receiver for different phase offsets
phase_offsets = [30, 60, 90] * pi/180; % Convert to radians
recovered_signals = zeros(length(phase_offsets), length(t));
for p = 1:length(phase_offsets)
    phi = phase_offsets(p);
    local_osc = cos(2*pi*fc*t + phi);
    mixed_signal = bpsk_signal .* local_osc;

    % Low-pass filter (moving average)
    filter_length = samples_per_bit/2;
    h = ones(1, filter_length)/filter_length;
    recovered = conv(mixed_signal, h, 'same');

    recovered_signals(p, :) = recovered;
end

% Plot Receiver Outputs (Time Domain)
figure('Position', [100, 100, 800, 600]);
for p = 1:length(phase_offsets)
    subplot(3,1,p);
    plot(t, recovered_signals(p, :), 'r', 'LineWidth', 1); hold on;
    original = repelem(bits, samples_per_bit);
    plot(t, original, 'b--', 'LineWidth', 1);
    grid on;
    title(['Recovered Signal (Phase Offset = ' num2str(phase_offsets(p)*180/pi) '째)'], 'FontSize', 13);
    xlabel('Time (s)', 'FontSize', 11);
    ylabel('Amplitude', 'FontSize', 11);
    legend('Recovered', 'Original Bits', 'Location', 'best');
    axis([0 10 -0.5 1.5]);
    set(gca, 'FontSize', 11);
end

% Spectral Domain of Recovered Signals (for all phase offsets)
figure('Position', [100, 100, 800, 600]);
colors = ['r'; 'g'; 'm']; % Different colors for each phase
for p = 1:length(phase_offsets)
    recovered_fft = fftshift(fft(recovered_signals(p, :), N_fft));
    recovered_psd = abs(recovered_fft).^2 / (N_fft * fs);

    subplot(3,1,p);
    semilogy(freq, recovered_psd, colors(p), 'LineWidth', 1.5); % Use semilogy for better visualization
    grid on;
    title(['Recovered PSD (Phase = ' num2str(phase_offsets(p)*180/pi) '째)'], 'FontSize', 13);
    xlabel('Frequency (Hz)', 'FontSize', 11);
    ylabel('Power/Hz (dB)', 'FontSize', 11);
    axis([-5 5 1e-5 max(recovered_psd)*1.1]); % Adjusted y-axis for log scale
    set(gca, 'FontSize', 11, 'GridAlpha', 0.3, 'GridColor', [0.5 0.5 0.5]);
    set(gca, 'Color', [0.98 0.98 0.98]); % Light gray background
end